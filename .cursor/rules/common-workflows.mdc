---
description:
globs:
alwaysApply: false
---
# Common AgentForge Development Workflows

Description: Step-by-step guidance for common development tasks in AgentForge. Request when creating a new extension, implementing agent types, adding UI components, setting up testing infrastructure, or integrating with the message bus.

This rule outlines step-by-step guidance for common development workflows in the AgentForge project.

## Creating a New Extension

1. Create directory structure:
   ```
   agentforge-{extension-name}/
   ├── package.json
   ├── tsconfig.json
   ├── src/
   │   ├── extension.ts       # Extension entry point
   │   └── {component}.ts     # Component implementations
   ├── test/                  # Unit tests
   └── README.md              # Extension documentation
   ```

2. Configure package.json with extension metadata:
   ```json
   {
     "name": "agentforge-{extension-name}",
     "displayName": "AgentForge {Extension Name}",
     "description": "...",
     "version": "0.0.1",
     "engines": {
       "vscode": "^1.60.0"
     },
     "main": "./out/extension.js",
     "activationEvents": [
       "onStartupFinished"
     ],
     "contributes": {
       "commands": [
         {
           "command": "agentforge.{extension-name}.{command}",
           "title": "AgentForge: {Command Name}"
         }
       ]
     }
   }
   ```

3. Implement extension activation:
   ```typescript
   // src/extension.ts
   import * as vscode from 'vscode';
   import { messageBus } from 'agentforge-core';

   export function activate(context: vscode.ExtensionContext) {
     console.log('Activating agentforge-{extension-name}');

     // Register with message bus
     messageBus.subscribe('agentforge.core.ready', () => {
       // Initialize extension components
     });

     // Register commands
     context.subscriptions.push(
       vscode.commands.registerCommand('agentforge.{extension-name}.{command}', () => {
         // Command implementation
       })
     );

     // Signal extension is ready
     messageBus.publish('agentforge.{extension-name}.ready', {
       timestamp: Date.now()
     });
   }

   export function deactivate() {
     // Cleanup resources
   }
   ```

## Adding a New Agent Type

1. Define agent type interface:
   ```typescript
   // agentforge-runtime/src/types.ts
   export interface {AgentType}Config extends AgentConfig {
     // Agent-specific configuration
   }

   export interface {AgentType}State extends AgentState {
     // Agent-specific state
   }
   ```

2. Create agent implementation:
   ```typescript
   // agentforge-runtime/src/agents/{AgentType}Agent.ts
   import { Agent, AgentConfig, AgentState } from '../types';

   export class {AgentType}Agent implements Agent {
     // Implementation
   }
   ```

3. Register agent type in factory:
   ```typescript
   // agentforge-runtime/src/AgentFactory.ts
   registerAgentType('{agent-type}', {
     create: (config) => new {AgentType}Agent(config),
     configSchema: {AgentType}ConfigSchema
   });
   ```

4. Create node renderer in graph extension:
   ```typescript
   // agentforge-graph/src/nodeRenderers/{AgentType}NodeRenderer.tsx
   export class {AgentType}NodeRenderer implements NodeRenderer {
     // Implementation
   }
   ```

## Implementing a New UI Component

1. Create component in appropriate extension:
   ```typescript
   // agentforge-graph/src/components/{ComponentName}.tsx
   import * as React from 'react';

   export interface {ComponentName}Props {
     // Props definition
   }

   export const {ComponentName}: React.FC<{ComponentName}Props> = (props) => {
     // Component implementation
   };
   ```

2. Register component with extension:
   ```typescript
   // agentforge-graph/src/extension.ts
   context.subscriptions.push(
     vscode.window.registerWebviewViewProvider(
       'agentforge.{component-id}',
       new {ComponentName}ViewProvider(context.extensionUri)
     )
   );
   ```

3. Add contribution point to package.json:
   ```json
   "contributes": {
     "views": {
       "agentforge": [
         {
           "id": "agentforge.{component-id}",
           "name": "{Component Name}"
         }
       ]
     }
   }
   ```

## Testing and Debugging Extensions

1. Configure launch.json for debugging:
   ```json
   {
     "version": "0.2.0",
     "configurations": [
       {
         "name": "Debug AgentForge Extension",
         "type": "extensionHost",
         "request": "launch",
         "runtimeExecutable": "${execPath}",
         "args": [
           "--extensionDevelopmentPath=${workspaceFolder}"
         ],
         "outFiles": [
           "${workspaceFolder}/out/**/*.js"
         ]
       }
     ]
   }
   ```

2. Run tests with:
   ```
   npm run test
   ```

3. Build and watch:
   ```
   npm run watch
   ```

## Implementing Agent Memory

1. Define memory schema:
   ```typescript
   // agentforge-memory/src/schemas/{MemoryType}Schema.ts
   export const {MemoryType}Schema = {
     // JSON Schema definition
   };
   ```

2. Create memory accessor:
   ```typescript
   // agentforge-memory/src/accessors/{MemoryType}Accessor.ts
   export class {MemoryType}Accessor implements MemoryAccessor {
     // Implementation
   }
   ```

3. Register with memory manager:
   ```typescript
   // agentforge-memory/src/MemoryManager.ts
   registerMemoryType('{memory-type}', {
     accessor: {MemoryType}Accessor,
     schema: {MemoryType}Schema
   });
   ```

## Cross-Extension Communication

1. Define message types:
   ```typescript
   // shared/src/messages.ts
   export interface {EventName}Event {
     // Event data
   }
   ```

2. Publish event:
   ```typescript
   messageBus.publish('agentforge.{extension}.{event}', eventData);
   ```

3. Subscribe to event:
   ```typescript
   messageBus.subscribe('agentforge.{extension}.{event}', (data) => {
     // Handle event
   });
   ```
